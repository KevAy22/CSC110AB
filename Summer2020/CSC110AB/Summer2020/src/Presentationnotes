Lecture 2
- System.out.println() the stuff in the () can be anythign from strings
to characters, to numbers, to expressions to variables, to a mixture of "Stuff"
- '+' is for concatenation 
- string concatenation vs additon 
- If I dont want a line break use the print() method
- An empty println() simply prints a line break
- Escape sequences are formatting commands into a string 
- '\' followed by a specific character, this only works within strings and there cannot 
be any spaces in-between
- \n is a newline \t is a tab \\ is a backslash \' is a single quote \" us a double quote

Lecture 3
- Keyword is a word with a special meaning 
- Variables are a storage location in memory with a name and value 
- An '=' operation saves a value into the variable left of it
- an identifier is a name 
- Golden Rule for an identifier can not start with a number, must be a single word,
'#' is not an acceptable letter, using legal alphanumeric character
- identifiers are case sensitive
- each identifier must have a unique name
- Cannot use any keyword as a direct identifier name
- Capitalize the first letter of every "word in the name exept the first
- Data type is the classification that determines the meaning ofyour data 
- Primitive Data Types are fundamental, basic data type that is built into the programming lang (i.e int, double)
- Abstract Data Type are man made data types 
- Variables, upon creation, must be set with a data type, once chose it never changes
- short, int, float, double, boolean (t/f) character
- Integers are whole numers only, no decimals allowed
- Shorts, int but with smaller range
- Double/ Float support integer and decimal values, if precision is vital use double over float
- Boolean is either true or false but never both 
- char data type is created with a pair of single quotes and is a single character 
- Characters and strings are not the same thing
- String is not a primitive data type 
- Declaration is a statement that creates something 
- Assignment is a statement that assigns a value to something
- Initialization is a statement that both creates and assigns a value to something
- Variable can only be declared once 
- Once declared, variables will continue to exist until the end of a code block
- Multiple declarations is possible 
- Scope is the programs' visibility range of "things"
- Define variables at beginning of code block to avoid any potential scoping issues
- +, -, *, / are operators
- Use parentheses to group terms, this can affect the order of operations 
- Associative and Communtative properties still apply
- minus signs can negate a value 
- Math expressions do not automatically reassign themselves back into variables, use an assignment operator accordingly 
- Modulus (%) operator calculates the remainder from an integer division 
- When using '/' be aware of what data type(s) your operands are
- ++ is the increment operator that increases value of a variable by one and Decrement -- decreases by one 
- Special assignment operators, a variation of '=' (i.e +=, *=) but be sure that the variable has a value beforehand 
- ? Overflow is when a variable is assigned a value that is too large for it to handle 
- ? Underflow is the same as overflow except its too small 
- All primitive data types have ranks predetermined by programing language 
- Double > float > int > short > char > boolean 
- Type conversion that occurs naturally is type coercion 
- Type conversion that occurs forcefully is called type casting 
- You cannot assign value to a variable of lower rank unless you type cast 
- ?Casting 

Lecture 4
- false is 0
- true is 1
- boolean can only support one of these two value, either true or false
- < is less than
- > is greater than
- <= is less than or equal to
- >= is greater than or equal to 
- == is equals and returns true if both values are exactly the same
- != is not equals, opposite of equals operator
- Operator Precedence is parentheses, unary, multiplicatie, additive,relational,equality,logical AND, logical OR,and assignment
- if (<expression>)
        statement;
- If the expression evaluates to true the nthe statementis executed 
- First line of an if statement does not have a semicolon, it is an entire statement
- In order to affect multiple statements use code block
    if(<Expression>)
    {
        //Insert code here
    }
- use "else" clause to execute another set of code, if expression evaluated to be false instead
    if(<expression>)//one "if" statement
        statement;//two clasues
    else 
        statement;
- ?defining odd/even numbers in if expression
- else clauses should use a code block too
- only one else clause per "if" statement 
- You can code "if" statement(s) within "if" statement(s) they are called nested "if" statements 
- In between "if" & "else" clauses, you can have as many "else if" caluses as you want
- "else if " caluse template
    if (<expression_1>){
        //if <expression_1> is true, then this code block executes 
        //and all other clauses are skipped
    }
    else if(<expression_2>){
        //if <expression_1> was false and <expression_2> is true, 
        //then this code block executes and all other clauses are skipped
    }
    else{
        //if ALL prior expressions were false, then 
        //only this code block will execute
    }
- "else-if" statements over nested "if" statements  
- Logical operators && [AND], || [OR], ![NOT]
- && operator returns true if both operands are true
- || operator returns true if either operand is true 
- ! operator returns opposite Boolean value 
- when using relational operators on 'chars', they are intertpreted as "integers"
- only == and != operators can work with 'String' operands 
- Everything within a code block cannot be seen by anything outside of the said code block

Lecture 5
- 

